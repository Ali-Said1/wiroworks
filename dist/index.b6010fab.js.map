{"mappings":"ICII,EAJJ,MAAM,EAAiB,SAAS,aAAa,CAAC,oBACxC,EAAa,SAAS,aAAa,CAAC,eAM1C,SAAS,EAAe,CAAS,EAE7B,EAAiB,YAAY,KACzB,EAAe,QAAQ,CAAC,CAAE,IAAK,AAAY,GAAZ,EAAgB,SAAU,QAAS,EACtE,EAAG,IACP,CAGA,SAAS,IAEL,cAAc,EAClB,CAGA,EAAW,gBAAgB,CAAC,YAAa,AAAC,IACtC,GAAM,CAAE,QAAA,CAAO,CAAE,CAAG,EACd,CAAE,IAAA,CAAG,CAAE,OAAA,CAAM,CAAE,CAAG,EAAW,qBAAqB,EAGpD,CAAA,EAAU,EAAM,AAAC,CAAA,EAAS,CAAA,EAAO,EACjC,EAAe,IAIf,EAAe,EAEvB,GAEA,EAAW,gBAAgB,CAAC,UAAW,GACvC,EAAW,gBAAgB,CAAC,aAAc,GAI1C,AAFwB,SAAS,cAAc,CAAC,kBAEhC,gBAAgB,CAAC,QAAS,KAEtC,AADkB,SAAS,cAAc,CAAC,cAChC,MAAM,EACpB","sources":["<anon>","scripts/static.js"],"sourcesContent":["const imageContainer = document.querySelector('.image-container');\nconst components = document.querySelector('.components');\nlet isScrolling = false; // Flag to track if scrolling is active\nlet scrollInterval; // Variable to hold the interval ID\n// Function to start scrolling\nfunction startScrolling(direction) {\n    isScrolling = true;\n    scrollInterval = setInterval(()=>{\n        imageContainer.scrollBy({\n            top: direction * 10,\n            behavior: 'smooth'\n        }); // Scroll up or down\n    }, 100); // Adjust the interval time as needed\n}\n// Function to stop scrolling\nfunction stopScrolling() {\n    isScrolling = false;\n    clearInterval(scrollInterval);\n}\n// Event listeners for mouse down, up, and move\ncomponents.addEventListener('mousedown', (event)=>{\n    const { clientY } = event;\n    const { top, bottom } = components.getBoundingClientRect();\n    // Check if the mouse is in the top half\n    if (clientY < top + (bottom - top) / 2) startScrolling(-1); // Scroll up\n    else startScrolling(1); // Scroll down\n});\ncomponents.addEventListener('mouseup', stopScrolling);\ncomponents.addEventListener('mouseleave', stopScrolling); // Stop scrolling when mouse leaves the component\nconst userguideSubmit = document.getElementById('userguide-done');\nuserguideSubmit.addEventListener('click', ()=>{\n    const userguide = document.getElementById('user-guide');\n    userguide.remove();\n});\n\n//# sourceMappingURL=index.b6010fab.js.map\n","const imageContainer = document.querySelector('.image-container');\r\nconst components = document.querySelector('.components');\r\n\r\nlet isScrolling = false; // Flag to track if scrolling is active\r\nlet scrollInterval; // Variable to hold the interval ID\r\n\r\n// Function to start scrolling\r\nfunction startScrolling(direction) {\r\n    isScrolling = true;\r\n    scrollInterval = setInterval(() => {\r\n        imageContainer.scrollBy({ top: direction * 10, behavior: 'smooth' }); // Scroll up or down\r\n    }, 100); // Adjust the interval time as needed\r\n}\r\n\r\n// Function to stop scrolling\r\nfunction stopScrolling() {\r\n    isScrolling = false;\r\n    clearInterval(scrollInterval);\r\n}\r\n\r\n// Event listeners for mouse down, up, and move\r\ncomponents.addEventListener('mousedown', (event) => {\r\n    const { clientY } = event;\r\n    const { top, bottom } = components.getBoundingClientRect();\r\n\r\n    // Check if the mouse is in the top half\r\n    if (clientY < top + (bottom - top) / 2) {\r\n        startScrolling(-1); // Scroll up\r\n    }\r\n    // Check if the mouse is in the bottom half\r\n    else {\r\n        startScrolling(1); // Scroll down\r\n    }\r\n});\r\n\r\ncomponents.addEventListener('mouseup', stopScrolling);\r\ncomponents.addEventListener('mouseleave', stopScrolling); // Stop scrolling when mouse leaves the component\r\n\r\nconst userguideSubmit = document.getElementById('userguide-done');\r\n\r\nuserguideSubmit.addEventListener('click', () => {\r\n    const userguide = document.getElementById('user-guide');\r\n    userguide.remove();\r\n});"],"names":["scrollInterval","imageContainer","document","querySelector","components","startScrolling","direction","setInterval","scrollBy","top","behavior","stopScrolling","clearInterval","addEventListener","event","clientY","bottom","getBoundingClientRect","userguideSubmit","getElementById","userguide","remove"],"version":3,"file":"index.b6010fab.js.map"}